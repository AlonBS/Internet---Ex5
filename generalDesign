
client:
    - index.html:
        - when the user send httpRequest for the first time, the browser will add automatically the cookies (if they
          are exist).
        - when the user will receive back the http response, it includes the id for the correct div window
          (as in ex 2).
        - the first 'window' contains the login and registration forms. after clicking the appropriate button, the
          data will be sent to the server, which verify it and then return the 'new id' and error message (if the id
          stays the same, an error was occurred).
        - the 'to-do' list window contains a 'table div' which used by AJAX to display the results.
          we will have a 'fix' line to add a new to-do that will call the server.
          while receiving the response from the server, update the 'table div'.

server:
    - main.js:
        - on http request arrival, check


client:
    - index.html:
        - same as ex2

--------------------------------------------------------------------

1. index.html: contains only one div (which holds all the http content) and send AJAX request to '/login' automatically.
2. loginBody.txt - only the html *body* for login which contains ajax that will send the username and password entered by the user.
3. to-doListBody.txt - only the html *body* for to-doList which includes ajax that will send on each button clicking


---------------------------
Client walkthrough: Open Browser -> enter: "localhost:80/index.html". This is a 'template'
of an html file which will be used to dynamcally show all the app screens. This file is
send to the user (the browser), together with a .js file called 'init.js' or something.
This file will automatically execute a call to a javascript function which will create
a xmlHttpRequest of 'get' with resource 'login' - this will cause the server to access
a static partial html file (only its body content) called 'loginRegister' which will show
the user the login in screen.
This loginRegister.html will include a .js script to allow the 'button' to be meaningful.
OnClick of loginButton should create another xmlHttpRequest, this time of type 'post' with
resource '/login'.
If the user is not authorized - some error will be returned, and the screen will prompt it.
This will be done by simply changing some value of a the html using: innerHtml = res.body;
Otherwise: a <div> content will be sent, so we need to place the current displayed div with
 this new div. we do so by typing: innerHtml = res.body. Inside this 'res.body', will
  be a <script> </script> tags, which will cause the browser to request yet another .js
  file called 'todoScript.js', which will introduce all the functions of the 'todoApp'.
  Important: this file should also include a function called 'showAll()', which will cause
  an xmlHttpRequest to be sent to the server to get all the values of the current logged in
   user. (The server will return a actual html with the data and the client should set
   the innerHTML accordingly). This showAll() function MUST be invoked automtically at
   the first time.
   Other methods will be inside this file. like 'add()' which will simply concatenate
   to the innerHTML, or delete which will remove by table row elementID (id's are unique).


var static = webServer.static('/staticResources');
???????
var showAllToDoList = function(req) {
    static('/showAllToDoList.html');
}; ????????

var login = function(req) {
    if (hasValidCookies(req)) {
        sendResponse (to ajax) with body = "status: success#" + static('to-doListBody.txt');
    }
    else {
        sendResponse (to ajax) with body = "status: failed#invalid username or password".
    }
}

server.put('/item', function(req, res, next) {
    if (hasValidCookies(req)) {
        bla bla
    }
    else {
        sendResponse (to ajax) with body = "status: failed#invalid username or password".
        redirect to ('/login');
    }
});

server.delete('/item', function(req, res, next) {
    if (hasValidCookies(req)) {
        bla bla
    }
    else {
        redirect to ('/login');
    }
});

server.post('/item', function(req, res, next) {
    if (hasValidCookies(req)) {
        bla bla
    }
    else {
        redirect to ('/login');
    }
});

server.post('/login', function(req, res, next) {
    if (validLogin) {
        // make sure that we set cookies to the user and save it in the server
        redirect to ('/item'); // it supposed to be 'get' request by default
    }
    else {
        redirect to ('/login');
    }
});

server.post('/register', function(req, res, next) {
    if (validLogin) {
        // make sure that we set cookies to the user and save it in the server
        redirect to ('/item'); // it supposed to be 'get' request by default
    }
    else {
        redirect to ('/login');
    }
});

server.get('/:type', function(req, res, next) {
    if (req.params.type === 'login') {
        login(req);
    }
    else if (req.params.type === 'item') {
        if (hasValidCookies(req) {
            showAllToDoList(req);
        }
        else {
            login();
        }
    }
    else if (req.params.type === 'register') {
        if (hasValidCookies(req) {
            showAllToDoList(req);
        }
        else {
            login();
        }
    }
    else {
        login(req);
    }
}

server.any('/' , function(req, res, next) {
    login(req);
}